// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sync/builder/syncbuilder.go

// Package middlewaremocksyncbuildermock is a generated GoMock package.
package middlewaremocksyncbuildermock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/open-feature/flagd/core/pkg/logger"
	sync "github.com/open-feature/flagd/core/pkg/sync"
	dynamic "k8s.io/client-go/dynamic"
)

// MockISyncBuilder is a mock of ISyncBuilder interface.
type MockISyncBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockISyncBuilderMockRecorder
}

// MockISyncBuilderMockRecorder is the mock recorder for MockISyncBuilder.
type MockISyncBuilderMockRecorder struct {
	mock *MockISyncBuilder
}

// NewMockISyncBuilder creates a new mock instance.
func NewMockISyncBuilder(ctrl *gomock.Controller) *MockISyncBuilder {
	mock := &MockISyncBuilder{ctrl: ctrl}
	mock.recorder = &MockISyncBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISyncBuilder) EXPECT() *MockISyncBuilderMockRecorder {
	return m.recorder
}

// SyncFromURI mocks base method.
func (m *MockISyncBuilder) SyncFromURI(uri string, logger *logger.Logger) (sync.ISync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFromURI", uri, logger)
	ret0, _ := ret[0].(sync.ISync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromURI indicates an expected call of SyncFromURI.
func (mr *MockISyncBuilderMockRecorder) SyncFromURI(uri, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromURI", reflect.TypeOf((*MockISyncBuilder)(nil).SyncFromURI), uri, logger)
}

// SyncsFromConfig mocks base method.
func (m *MockISyncBuilder) SyncsFromConfig(sourceConfig []sync.SourceConfig, logger *logger.Logger) ([]sync.ISync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncsFromConfig", sourceConfig, logger)
	ret0, _ := ret[0].([]sync.ISync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncsFromConfig indicates an expected call of SyncsFromConfig.
func (mr *MockISyncBuilderMockRecorder) SyncsFromConfig(sourceConfig, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncsFromConfig", reflect.TypeOf((*MockISyncBuilder)(nil).SyncsFromConfig), sourceConfig, logger)
}

// MockIK8sClientBuilder is a mock of IK8sClientBuilder interface.
type MockIK8sClientBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockIK8sClientBuilderMockRecorder
}

// MockIK8sClientBuilderMockRecorder is the mock recorder for MockIK8sClientBuilder.
type MockIK8sClientBuilderMockRecorder struct {
	mock *MockIK8sClientBuilder
}

// NewMockIK8sClientBuilder creates a new mock instance.
func NewMockIK8sClientBuilder(ctrl *gomock.Controller) *MockIK8sClientBuilder {
	mock := &MockIK8sClientBuilder{ctrl: ctrl}
	mock.recorder = &MockIK8sClientBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIK8sClientBuilder) EXPECT() *MockIK8sClientBuilderMockRecorder {
	return m.recorder
}

// GetK8sClients mocks base method.
func (m *MockIK8sClientBuilder) GetK8sClient() (dynamic.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sClient")
	ret0, _ := ret[0].(dynamic.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetK8sClients indicates an expected call of GetK8sClients.
func (mr *MockIK8sClientBuilderMockRecorder) GetK8sClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sClient", reflect.TypeOf((*MockIK8sClientBuilder)(nil).GetK8sClient))
}
