// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sync/grpc/grpc_sync.go

// Package grpcmock is a generated GoMock package.
package grpcmock

import (
	context "context"
	reflect "reflect"

	syncv1grpc "buf.build/gen/go/open-feature/flagd/grpc/go/sync/v1/syncv1grpc"
	syncv1 "buf.build/gen/go/open-feature/flagd/protocolbuffers/go/sync/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockFlagSyncServiceClient is a mock of FlagSyncServiceClient interface.
type MockFlagSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSyncServiceClientMockRecorder
}

// MockFlagSyncServiceClientMockRecorder is the mock recorder for MockFlagSyncServiceClient.
type MockFlagSyncServiceClientMockRecorder struct {
	mock *MockFlagSyncServiceClient
}

// NewMockFlagSyncServiceClient creates a new mock instance.
func NewMockFlagSyncServiceClient(ctrl *gomock.Controller) *MockFlagSyncServiceClient {
	mock := &MockFlagSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockFlagSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagSyncServiceClient) EXPECT() *MockFlagSyncServiceClientMockRecorder {
	return m.recorder
}

// FetchAllFlags mocks base method.
func (m *MockFlagSyncServiceClient) FetchAllFlags(ctx context.Context, in *syncv1.FetchAllFlagsRequest, opts ...grpc.CallOption) (*syncv1.FetchAllFlagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllFlags", varargs...)
	ret0, _ := ret[0].(*syncv1.FetchAllFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllFlags indicates an expected call of FetchAllFlags.
func (mr *MockFlagSyncServiceClientMockRecorder) FetchAllFlags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllFlags", reflect.TypeOf((*MockFlagSyncServiceClient)(nil).FetchAllFlags), varargs...)
}

// SyncFlags mocks base method.
func (m *MockFlagSyncServiceClient) SyncFlags(ctx context.Context, in *syncv1.SyncFlagsRequest, opts ...grpc.CallOption) (syncv1grpc.FlagSyncService_SyncFlagsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFlags", varargs...)
	ret0, _ := ret[0].(syncv1grpc.FlagSyncService_SyncFlagsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFlags indicates an expected call of SyncFlags.
func (mr *MockFlagSyncServiceClientMockRecorder) SyncFlags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFlags", reflect.TypeOf((*MockFlagSyncServiceClient)(nil).SyncFlags), varargs...)
}

// MockFlagSyncServiceClientResponse is a mock of FlagSyncServiceClientResponse interface.
type MockFlagSyncServiceClientResponse struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSyncServiceClientResponseMockRecorder
}

// MockFlagSyncServiceClientResponseMockRecorder is the mock recorder for MockFlagSyncServiceClientResponse.
type MockFlagSyncServiceClientResponseMockRecorder struct {
	mock *MockFlagSyncServiceClientResponse
}

// NewMockFlagSyncServiceClientResponse creates a new mock instance.
func NewMockFlagSyncServiceClientResponse(ctrl *gomock.Controller) *MockFlagSyncServiceClientResponse {
	mock := &MockFlagSyncServiceClientResponse{ctrl: ctrl}
	mock.recorder = &MockFlagSyncServiceClientResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagSyncServiceClientResponse) EXPECT() *MockFlagSyncServiceClientResponseMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockFlagSyncServiceClientResponse) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockFlagSyncServiceClientResponse) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).Context))
}

// Header mocks base method.
func (m *MockFlagSyncServiceClientResponse) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).Header))
}

// Recv mocks base method.
func (m *MockFlagSyncServiceClientResponse) Recv() (*syncv1.SyncFlagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*syncv1.SyncFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockFlagSyncServiceClientResponse) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockFlagSyncServiceClientResponse) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockFlagSyncServiceClientResponse) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockFlagSyncServiceClientResponseMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFlagSyncServiceClientResponse)(nil).Trailer))
}
