{
  "$id": "https://flagd.dev/schema/v0/flagd-definitions.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "flagd Flag Configuration",
  "description": "Defines flags for use in flagd, including typed variants and rules",
  "type": "object",
  "properties": {
    "flags": {
      "title": "Flags",
      "description": "Top-level flags object. All flags are defined here.",
      "type": "object",
      "$comment": "flag objects are one of the 4 flag types defined in $defs",
      "additionalProperties": false,
      "patternProperties": {
        "^.{1,}$": {
          "oneOf": [
            {
              "title": "Boolean flag",
              "description": "A flag having boolean values.",
              "$ref": "#/$defs/booleanFlag"
            },
            {
              "title": "String flag",
              "description": "A flag having string values.",
              "$ref": "#/$defs/stringFlag"
            },
            {
              "title": "Numeric flag",
              "description": "A flag having numeric values.",
              "$ref": "#/$defs/numberFlag"
            },
            {
              "title": "Object flag",
              "description": "A flag having arbitrary object values.",
              "$ref": "#/$defs/objectFlag"
            }
          ]
        }
      }
    },
    "$evaluators": {
      "title": "Evaluators",
      "description": "Reusable targeting rules that can be referenced with \"$ref\": \"myRule\" in multiple flags.",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^.{1,}$": {
          "$comment": "this relative ref means that targeting.json MUST be in the same dir, or available on the same HTTP path",
          "$ref": "./targeting.json#/$defs/targeting"
        }
      }
    }
  },
  "$defs": {
    "flag": {
      "$comment": "base flag object; no title/description here, allows for better UX, keep it in the overrides",
      "type": "object",
      "properties": {
        "state": {
          "title": "Flag State",
          "description": "Indicates whether the flag is functional. Disabled flags are treated as if they don't exist.",
          "type": "string",
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        },
        "defaultVariant": {
          "title": "Default Variant",
          "description": "The variant to serve if no dynamic targeting applies (including if the targeting returns null).",
          "type": "string"
        },
        "targeting": {
          "$ref": "./targeting.json#/$defs/targeting"
        }
      },
      "required": [
        "state",
        "defaultVariant"
      ]
    },
    "booleanVariants": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^.{1,}$": {
              "type": "boolean"
            }
          },
          "default": {
            "true": true,
            "false": false
          }
        }
      }
    },
    "stringVariants": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^.{1,}$": {
              "type": "string"
            }
          }
        }
      }
    },
    "numberVariants": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^.{1,}$": {
              "type": "number"
            }
          }
        }
      }
    },
    "objectVariants": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^.{1,}$": {
              "type": "object"
            }
          }
        }
      }
    },
    "$comment": "merge the variants with the base flag to build our typed flags",
    "booleanFlag": {
      "allOf": [
        {
          "$ref": "#/$defs/flag"
        },
        {
          "$ref": "#/$defs/booleanVariants"
        }
      ]
    },
    "stringFlag": {
      "allOf": [
        {
          "$ref": "#/$defs/flag"
        },
        {
          "$ref": "#/$defs/stringVariants"
        }
      ]
    },
    "numberFlag": {
      "allOf": [
        {
          "$ref": "#/$defs/flag"
        },
        {
          "$ref": "#/$defs/numberVariants"
        }
      ]
    },
    "objectFlag": {
      "allOf": [
        {
          "$ref": "#/$defs/flag"
        },
        {
          "$ref": "#/$defs/objectVariants"
        }
      ]
    }
  }
}
